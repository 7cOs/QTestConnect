<head>
	<meta name="viewport" content="width=device-width, initial-scale=1">
	<link 
		rel="stylesheet" 
		href="https://cdnjs.cloudflare.com/ajax/libs/
		font-awesome/4.7.0/css/font-awesome.min.css">	
	
	<script type="text/javascript">
	
		var d, ci;
		
		window.onload = function() { init(); };
		
		function build() {
			var layout = ci.add('layout');
			layout.add('quadrants');
			for( var i=0; i<3; i++ ) {
				var qd = layout.q('quadrants').add('quadrant');	
				for(var j=0; j<3; j++) {
					var p = qd.add('part');
					if( i==0 && j==1) {
						p.id = 'ciHeader';
						p.htm('qTestConnect');
					} else if( i==1 && j==1 ) {
						p.id = 'cnContents';
					} else if(i==1 && j==2 ) {
						var cn = p.add( 'cn' );
						var b = cn.add('button');
						b.innerHTML = 'Fetch qTest TestCase...';
						b.addEventListener('click', function( e ){
							q('#cnProgress _progress_').className = 'fa fa-spinner fa-spin';
							q('#cnProgress desc').txt('Processing...');
							xhttp = getXmlHttpReq();
							xhttp.onreadystatechange = function() {
							    if (this.readyState == 4 && this.status == 200) {
							    	q('#cnProgress _progress_').className = 'cmp';
							    	// q('#cnProgress desc').htm('&nbsp;');
							    	q('#cnProgress desc').htm(this.responseText);
							    }
							};
							xhttp.open("GET", "/fetchQtestTestcase", true);
							xhttp.send();
						});
					}	else if(i=='2' && j==1) {
						p.id = 'cnProgress';
						p.add('_progress_');
						p.add('desc').htm('&nbsp;');
					}
				}
			}
			
			with(layout.style) {
				fontFamily = 'arial';
				display = 'table';
				height = '100%'; width = height;
				// border = 'solid';
				layout.q('quadrants').style.display = 'table-row-group';
				[].forEach.call(layout.qs('quadrant'), function(o, i) {
					with(o.style) {
						display = 'table-row';
					}
					[].forEach.call( o.qs('part'), function(p) {
						with(p.style) {
							display = 'table-cell';
							border = 'solid';
							verticalAlign = 'middle';
							if( i==0 || i==2 ) {
								width = '11%';
							}
							else if( i==1 ) {
								height = '65%';
								textAlign = 'center';
								if(b = p.q('button')) {
									verticalAlign = 'top';
									textAlign = 'left';
									with(b.style) {
										display = 'inline';
										fontSize = '17px';
										// b.progen.progen.style.width = '50%';
										// height = '55px';
									}
								}
							}
							
							if(p.id == 'cnContents') {
								width = '50%';
								verticalAlign = 'top';
							}
							
							else if(p.id == 'cnProgress'){
								with(p.style) {
									textAlign = 'center';
								}
								[].forEach.call(p.qs('_progress_, desc'), function(o){
									with(o.style) {
										display = 'inline';
										if( o.nodeName == '_PROGRESS_' ) {
											display=null;
											fontSize = '29px';
										}else {
											paddingLeft = '7px';
										}
									}
								});
							}
						}
					});
				});
			}
		}
		
		function getXmlHttpReq() {
			return new XMLHttpRequest();
		}
		
		function init() {
			
			d = document;
			q=function( q ) { return d.querySelector( q ); };
			qs=function( q ) { return d.querySelectorAll( q ); };
			
			// - Let ci be client-interface - //
			ci = d.body;
			ci.id = 'ci';
	
			Element.prototype.add = function(n) {
				if(typeof(n)== 'object') {
					this.appendChild( n ); 
					n.progen = this;
					return;
				}
				var cmp = d.createElement(n);
				cmp.className = 'cmp';
				with( cmp.style ) {
					if ( n != 'ico' ) {
						display = 'block';
					}
				}
				// - Store progenitor in child - //
				cmp.progen = this;
				return this.appendChild(cmp);
			};
			
			Element.prototype.q = function( q ) {
				return this.querySelector( q );
			};
			
			Element.prototype.qs = function( q ) {
				return this.querySelectorAll( q );
			};
			
			Element.prototype.clear = function() {
				this.textContent = '';
			};
			
			Element.prototype.show = function( ) {
				this.style.display = '';
			};
			
			Element.prototype.hide = function( ) {
				this.style.display = 'none';
			};	
			
			Element.prototype.txt = function( t ) {
				this.textContent = t;
			};	
			
			Element.prototype.htm = function( h ) {
				this.innerHTML = h;
			};			
	
			build(); // - Build cI - //
		}	
	</script>
</head>